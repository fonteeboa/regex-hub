import { describe, it, expect } from 'vitest';
import Regex from "../src/index.js";

const testCases = [
    // Windows Firewall Commands
    { command: 'netsh advfirewall set allprofiles state on', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'netsh advfirewall set allprofiles state off', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'netsh advfirewall firewall add rule name="Allow App" dir=in action=allow program="C:\Caminho\Para\App.exe" enable=yes', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'netsh advfirewall firewall add rule name="Allow HTTP" dir=in action=allow protocol=TCP localport=80', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'netsh advfirewall firewall add rule name="Block HTTP" dir=in action=block protocol=TCP localport=80', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'netsh advfirewall firewall delete rule name="Allow HTTP"', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'netsh advfirewall show currentprofile', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'netsh advfirewall export "C:\firewall-config.wfw"', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'netsh advfirewall import "C:\firewall-config.wfw"', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'netsh advfirewall set currentprofile logging droppedpackets enable', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'netsh advfirewall set currentprofile logging filename "C:\firewall.log"', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'netsh advfirewall show currentprofile', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'netsh advfirewall firewall show rule name=all | findstr Group', regex: Regex.windowsFirewallRegex, shouldMatch: true },
    { command: 'Get-PnpDevice | Where-Object { $_.FriendlyName -like "*Bluetooth*" }', regex: Regex.windowsBluetoothRegex, shouldMatch: true },
    { command: 'Disable-NetAdapter -Name "Bluetooth Network Connection"', regex: Regex.windowsBluetoothRegex, shouldMatch: true },
    { command: 'Enable-NetAdapter -Name "Bluetooth Network Connection"', regex: Regex.windowsBluetoothRegex, shouldMatch: true },
    { command: 'Set-BluetoothSettings -AllowReceiveFiles $true', regex: Regex.windowsBluetoothRegex, shouldMatch: true },
    { command: 'Set-BluetoothSettings -AllowReceiveFiles $false', regex: Regex.windowsBluetoothRegex, shouldMatch: true },
    { command: 'Set-ItemProperty -Path "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\USBSTOR" -Name "Start" -Value 4', regex: Regex.windowsUSBRegexManage, shouldMatch: true },
    { command: 'Set-ItemProperty -Path "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\USBSTOR" -Name "Start" -Value 3', regex: Regex.windowsUSBRegexManage, shouldMatch: true },
    { command: 'Get-PnpDevice -Class "USB"', regex: Regex.windowsUSBRegexList, shouldMatch: true },
    // Linux Firewall Commands
    { command: 'sudo ufw enable', regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: 'sudo ufw disable', regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: 'sudo ufw default deny incoming', regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: 'sudo ufw default allow outgoing', regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: 'sudo ufw allow ssh', regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: 'sudo ufw allow http', regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: 'sudo ufw allow https', regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: 'sudo ufw delete allow http', regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: 'sudo ufw status numbered', regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: 'sudo ufw logging on', regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: 'sudo iptables -L', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'sudo iptables -A INPUT -s 192.168.1.100 -j DROP', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'sudo sh -c "iptables-save > /etc/iptables/rules.v4"', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: false },
    { command: 'sudo sh -c "iptables-save > /etc/sysconfig/iptables"', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: false },
    { command: "rm -rf /", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "sudo reboot", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "chmod 777 /etc/passwd", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "kill -9 1234", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "ps aux | grep root", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "iptables -A INPUT -j DROP", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "mount /dev/sda1 /mnt", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "dd if=/dev/zero of=/dev/sda", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "ls -la /root", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "grep password /etc/shadow", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "awk '{print $1}' file.txt", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "sed 's/root/hacker/g' /etc/passwd", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "tail -f /var/log/auth.log", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "cut -d':' -f1 /etc/passwd", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "tee /dev/null", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: "alias ls='rm -rf /'", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: true },
    { command: 'systemctl status bluetooth', regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: 'sudo systemctl disable bluetooth', regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: 'sudo systemctl stop bluetooth', regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: 'sudo systemctl enable bluetooth', regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: 'sudo systemctl start bluetooth', regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: "ufw enable", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw disable", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw status", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw logging on", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw logging off", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw default allow incoming", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw default deny outgoing", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw allow 22", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw deny 80", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw delete 443", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw allow 443/tcp", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw deny 8080/udp", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw allow from 192.168.1.1 to any port 22", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "ufw deny from 10.0.0.1 to any port 80", regex: Regex.linuxFirewallUFWRegex, shouldMatch: true },
    { command: "iptables -A INPUT -p tcp --dport 80 -j ACCEPT", regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: "iptables --append INPUT -p udp --dport 53 -j ACCEPT", regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: "iptables -I OUTPUT -p tcp --dport 22 -j DROP", regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'sudo modprobe -r usb_storage', regex: Regex.linuxUSBRegexManage, shouldMatch: true },
    { command: 'sudo tee /sys/bus/usb/drivers/usb/unbind', regex: Regex.linuxUSBRegexManage, shouldMatch: true },
    { command: 'sudo modprobe usb_storage', regex: Regex.linuxUSBRegexManage, shouldMatch: true },
    { command: "sudo systemctl start bluetooth", regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: "sudo systemctl stop bluetooth", regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: "sudo systemctl enable bluetooth", regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: "sudo systemctl disable bluetooth", regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: "sudo systemctl status bluetooth", regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: "sudo bluetoothctl power on", regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: "sudo bluetoothctl power off", regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: "sudo bluetoothctl pair 00:1A:7D:DA:71:13", regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: "sudo bluetoothctl connect 00:1A:7D:DA:71:13", regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: "sudo bluetoothctl disconnect 00:1A:7D:DA:71:13", regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: "sudo bluetoothctl remove 00:1A:7D:DA:71:13", regex: Regex.linuxBluetoothRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t filter -P INPUT ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t filter -P FORWARD ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t raw -F', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t raw -X', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t mangle -F', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t mangle -X', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t filter -F', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t filter -X', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t nat -F', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t nat -X', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/ip6tables -w -A INPUT -s fec0::/16 -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/ip6tables -w -A INPUT -d fec0::/16 -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/ip6tables -w -A INPUT -s fe80::/16 -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t mangle -N bb_mangle_redir', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t mangle -N bb_mangle_redir_jump_pre', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t mangle -N bb_mangle_redir_jump_forward', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t mangle -N bb_mangle_mark', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t mangle -N bb_security', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t mangle -N bb_mangle_auth_acc', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t mangle -N bb_mangle_policy', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t mangle -A PREROUTING -j bb_security', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t mangle -A PREROUTING -j bb_mangle_auth_acc', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t filter -N bb_fw_recovery', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t filter -N bb_fw_threats', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t filter -A FORWARD -j bb_fw_recovery', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/ipset -q -exist create bb_virtualoffice_src hash:ip family inet timeout 43200', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t filter -A bb_fw_virtualoffice -m set --match-set bb_virtualoffice_src src -m conntrack --ctstate NEW,RELATED,ESTABLISHED -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t nat -N bb_nat_redir', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t nat -A PREROUTING -j bb_nat_redir', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t mangle -A bb_in_related -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -A bb_in_security -m mark --mark 0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -P FORWARD DROP', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t filter -F bb_fw_sdwan >>/dev/null 2>&1', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: '/usr/sbin/iptables -w -t filter -A bb_fw_sdwan -i eth0 -j ACCEPT >>/dev/null 2>&1', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t filter -P INPUT ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t filter -P FORWARD ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t raw -F', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t raw -X', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t mangle -F', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t mangle -X', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t filter -F', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t filter -X', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t nat -F', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t nat -X', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'ip6tables -w -A INPUT -s fec0::/16 -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'ip6tables -w -A INPUT -d fec0::/16 -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'ip6tables -w -A INPUT -s fe80::/16 -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t mangle -N bb_mangle_redir', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t mangle -N bb_mangle_redir_jump_pre', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t mangle -N bb_mangle_redir_jump_forward', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t mangle -N bb_mangle_mark', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t mangle -N bb_security', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t mangle -N bb_mangle_auth_acc', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t mangle -N bb_mangle_policy', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t mangle -A PREROUTING -j bb_security', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t mangle -A PREROUTING -j bb_mangle_auth_acc', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t filter -N bb_fw_recovery', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t filter -N bb_fw_threats', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t filter -A FORWARD -j bb_fw_recovery', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'ipset -q -exist create bb_virtualoffice_src hash:ip family inet timeout 43200', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t filter -A bb_fw_virtualoffice -m set --match-set bb_virtualoffice_src src -m conntrack --ctstate NEW,RELATED,ESTABLISHED -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t nat -N bb_nat_redir', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t nat -A PREROUTING -j bb_nat_redir', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t mangle -A bb_in_related -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -A bb_in_security -m mark --mark 0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -P FORWARD DROP', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t filter -F bb_fw_sdwan >>/dev/null 2>&1', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    { command: 'iptables -w -t filter -A bb_fw_sdwan -i eth0 -j ACCEPT >>/dev/null 2>&1', regex: Regex.linuxFirewallIptablesRegex, shouldMatch: true },
    // macOS Firewall Commands
    { command: 'sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on', regex: Regex.macOSFirewallRegex, shouldMatch: true },
    { command: 'sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off', regex: Regex.macOSFirewallRegex, shouldMatch: true },
    { command: 'sudo /usr/libexec/ApplicationFirewall/socketfilterfw --listapps', regex: Regex.macOSFirewallRegex, shouldMatch: true },
    { command: 'sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add "/Applications/Safari.app"', regex: Regex.macOSFirewallRegex, shouldMatch: true },
    { command: 'sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setstealthmode on', regex: Regex.macOSFirewallRegex, shouldMatch: true },
    { command: 'sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setstealthmode off', regex: Regex.macOSFirewallRegex, shouldMatch: true },
    { command: 'sudo /usr/libexec/ApplicationFirewall/socketfilterfw --listapps', regex: Regex.macOSFirewallRegex, shouldMatch: true },
    { command: 'sudo defaults write /Library/Preferences/com.apple.Bluetooth.plist ControllerPowerState -int 1', regex: Regex.macOSBluetoothRegex, shouldMatch: true },
    { command: 'sudo defaults write /Library/Preferences/com.apple.Bluetooth.plist ControllerPowerState -int 0', regex: Regex.macOSBluetoothRegex, shouldMatch: true },
    { command: 'system_profiler SPUSBDataType', regex: Regex.macOSUSBRegexList, shouldMatch: true },
    { command: 'sudo killall -HUP bluetoothd', regex: Regex.macOSBluetoothRegex, shouldMatch: true },
    // Negative Test Cases
    { command: 'invalid command example', regex: Regex.windowsFirewallRegex, shouldMatch: false },
    { command: 'echo "Not a firewall command"', regex: Regex.linuxFirewallUFWRegex, shouldMatch: false },
    { command: "bluetoothctl start bluetooth", regex: Regex.linuxBluetoothRegex, shouldMatch: false },
    { command: "sudo systemctl restart bluetooth", regex: Regex.linuxBluetoothRegex, shouldMatch: false },
    { command: "sudo bluetoothctl add 00:1A:7D:DA:71:13", regex: Regex.linuxBluetoothRegex, shouldMatch: false },
    { command: "echo Hello World", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: false },
    { command: "git commit -m 'fix'", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: false },
    { command: "npm install express", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: false },
    { command: "yarn add react", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: false },
    { command: "node index.js", regex: Regex.linuxCommonDangerousFunctions, shouldMatch: false },
];

describe('Command Validation Tests', () => {
    testCases.forEach(({ command, regex, shouldMatch }) => {
        it(`should ${shouldMatch ? 'match' : 'not match'} regex for command: ${command}`, () => {
            expect(regex.test(command)).toBe(shouldMatch);
        });
    });
});